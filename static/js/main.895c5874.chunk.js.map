{"version":3,"sources":["Components/AddItemFormPropsType.tsx","Components/EditableSpan.tsx","Components/Task.tsx","Components/Todolist.tsx","reducers/tasksReducer.ts","reducers/todoListReducer.ts","App.tsx","serviceWorker.ts","store/store.ts","index.tsx"],"names":["AddItemForm","React","memo","props","useState","title","setTitle","error","setError","addTask","trim","addItem","TextField","id","label","variant","value","onChange","e","currentTarget","onKeyPress","charCode","size","Button","color","style","height","borderRadius","onClick","Add","className","EditableSpan","editMode","setEditMode","activateInputMode","onBlur","autoFocus","onDoubleClick","Task","onChangeTitleCallback","changeTaskStatusCallback","removeTaskCallback","task","isDone","onClickRemoveHandler","useCallback","onChangeStatusHandler","newIsDoneValue","checked","onChangeTitleHandler","newValue","type","IconButton","Delete","Todolist","console","log","tasks","removeTask","changeTodoFilter","changeTaskStatus","removeTodolist","filter","onChangeTaskTitle","onChangeTodoListTitle","removeTodolistHandler","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","addTaskHandler","tasksForTodolist","t","removeTaskHandler","taskId","changeTaskTitleHandler","changeTaskStatusHandler","map","key","initialStateTask","initialStateTodoList","App","dispatch","useDispatch","todoLists","useSelector","state","onChangeTitle","todolistId","idTask","onChangeTitleAC","removeTaskAC","addTaskAC","changeStatus","changeStatusAC","addTodoList","action","newId","v1","addTodoListAC","valueFilter","changeTodoFilterAC","removeTodolistAC","onChangeTodoListTitleAC","AppBar","position","Toolbar","edge","aria-label","sx","mr","Menu","Typography","component","flexGrow","Container","fixed","marginTop","Grid","container","spacing","tl","allTodolistTasks","item","Paper","padding","Boolean","window","location","hostname","match","rootReducer","combineReducers","copyState","f","m","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.895c5874.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {Button, TextField} from \"@material-ui/core\";\r\nimport {Add} from \"@material-ui/icons\";\r\n\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title.trim());\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(error !== null){\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addTask();\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n\r\n            <TextField id=\"outlined-basic\"\r\n                       label={error? \"\":\"Enter new task\"}\r\n                       variant=\"outlined\"\r\n                       value={title}\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       size={\"small\"}\r\n                       error={!!error}\r\n            />\r\n\r\n            <Button variant={\"contained\"} color={\"success\"} style={{height: \"39px\", borderRadius:\"0px\"} } onClick={addTask}>\r\n                <Add/>\r\n            </Button>\r\n            {error && <div className=\"error-message\">{error}</div>}\r\n        </div>\r\n    )\r\n\r\n})","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\n\r\nexport type EditableSpanType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = (props: EditableSpanType) => {\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [title, setTitle] = useState(\"\")\r\n\r\n    const activateSpanMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n\r\n    const activateInputMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title);\r\n\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.charCode === 13) {\r\n            activateInputMode();\r\n        }\r\n    }\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n\r\n    }\r\n    return editMode\r\n        ? <input onKeyPress={onKeyPressHandler} value={title} onBlur={activateInputMode} onChange={onChangeTitleHandler} autoFocus/>\r\n        : <span onDoubleClick={activateSpanMode}>{props.title}</span>\r\n}","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskType} from \"./Todolist\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    onChangeTitleCallback: (title: string, todolistId: string) => void\r\n    removeTaskCallback: (taskId: string) => void\r\n    changeTaskStatusCallback: (isDone: boolean, todolistId: string) => void\r\n}\r\n\r\nexport const Task = React.memo((props:TaskPropsType) =>{\r\nconst { onChangeTitleCallback,changeTaskStatusCallback,removeTaskCallback} = props\r\nconst {id,isDone,title } = props.task\r\n\r\n    const onClickRemoveHandler = useCallback(() => removeTaskCallback(id),[removeTaskCallback,id])\r\n\r\n    const onChangeStatusHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n        changeTaskStatusCallback(newIsDoneValue, id);\r\n    },[changeTaskStatusCallback,id])\r\n\r\n    const onChangeTitleHandler = useCallback((newValue: string) => {\r\n        onChangeTitleCallback(title, id)\r\n    },[onChangeTitleCallback,id])\r\n\r\n    return <div  className={isDone ? \"is-done\" : \"\"}>\r\n        <input type=\"checkbox\" onChange={onChangeStatusHandler} checked={isDone}/>\r\n        <EditableSpan title={title} onChange={onChangeTitleHandler}/>\r\n        <IconButton size={\"small\"} onClick={onClickRemoveHandler}>\r\n            <Delete color={\"error\"}/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {ChangeEvent, useCallback} from 'react';\nimport {FilterValuesType} from '../App';\nimport {AddItemForm} from \"./AddItemFormPropsType\";\nimport {EditableSpan} from \"./EditableSpan\";\nimport {Button, IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\nimport {Task} from \"./Task\";\n\n\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\n\ntype PropsType = {\n    id: string\n    title: string\n    tasks: Array<TaskType>\n    removeTask: (taskId: string, todolistId: string) => void\n    changeTodoFilter: (value: FilterValuesType, todolistId: string) => void\n    addTask: (title: string, todolistId: string) => void\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\n    removeTodolist: (id: string) => void\n    filter: FilterValuesType\n    onChangeTaskTitle: (value: string, todolistId: string, id: string) => void\n    onChangeTodoListTitle: (newValue: string, id: string) => void\n}\n\nexport const Todolist = React.memo((props: PropsType) => {\n    console.log(\"Todolist\")\n\n    const {\n        id, title, tasks, removeTask, changeTodoFilter, addTask,\n        changeTaskStatus, removeTodolist, filter, onChangeTaskTitle, onChangeTodoListTitle\n    } = props\n\n    const removeTodolistHandler = useCallback(() => removeTodolist(id), [removeTodolist, id])\n    const onAllClickHandler = useCallback(() => changeTodoFilter(\"all\", id), [changeTodoFilter, id])\n    const onActiveClickHandler = useCallback(() => changeTodoFilter(\"active\", id), [changeTodoFilter, id])\n    const onCompletedClickHandler = useCallback(() => changeTodoFilter(\"completed\", id), [changeTodoFilter, id])\n\n    const addTaskHandler = useCallback((title: string) => {\n        addTask(title, id)\n    }, [addTask, id])\n\n    const onChangeTitleHandler = useCallback((newValue: string) => {\n        onChangeTodoListTitle(newValue, id)\n    }, [onChangeTodoListTitle, id])\n\n\n    let tasksForTodolist = tasks;\n\n    if (filter === \"active\") {\n        tasksForTodolist = tasks.filter(t => !t.isDone);\n    }\n    if (filter === \"completed\") {\n        tasksForTodolist = tasks.filter(t => t.isDone);\n    }\n\n    const removeTaskHandler = useCallback((taskId: string) => removeTask(taskId, id), [removeTask, id])\n    const changeTaskTitleHandler = useCallback((taskId: string, newValue: string) => onChangeTaskTitle(taskId, newValue, id), [onChangeTaskTitle, id])\n    const changeTaskStatusHandler = useCallback((newIsDoneValue: boolean, taskId: string) => changeTaskStatus(taskId, newIsDoneValue, id), [changeTaskStatus, id])\n\n\n    return <div>\n        <h3>\n            <EditableSpan title={title} onChange={onChangeTitleHandler}/>\n            <IconButton size={\"small\"} onClick={removeTodolistHandler}>\n                <Delete color={\"warning\"}/>\n            </IconButton>\n        </h3>\n        <AddItemForm addItem={addTaskHandler}/>\n        <ul>\n            {\n                tasksForTodolist.map(t => {\n                    return (\n                        <li>\n                            <Task\n                                key={t.id}\n                                task={t}\n                                removeTaskCallback={removeTaskHandler}\n                                onChangeTitleCallback={changeTaskTitleHandler}\n                                changeTaskStatusCallback={changeTaskStatusHandler}/>\n                        </li>\n                    )\n                })\n            }\n        </ul>\n        <div>\n            <Button color={\"success\"} size={\"small\"} variant={filter === 'all' ? \"contained\" : \"outlined\"} onClick={onAllClickHandler}>\n                All\n            </Button>\n            <Button color={\"warning\"} size={\"small\"} variant={filter === 'active' ? \"contained\" : \"outlined\"} onClick={onActiveClickHandler}>\n                Active\n            </Button>\n            <Button size={\"small\"} variant={filter === 'completed' ? \"contained\" : \"outlined\"} onClick={onCompletedClickHandler}>\n                Completed\n            </Button>\n        </div>\n    </div>\n})\n\n\n","import {TasksStateType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {AddTodoListType, RemoveTodoType} from \"./todoListReducer\";\r\n\r\nconst initialStateTask:TasksStateType = {}\r\n\r\nexport const tasksReducer = (state = initialStateTask, action: ActionTaskType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TASKS\": {\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.id)}\r\n        }\r\n        case \"ADD-TASK\": {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: [{id: v1(), title: action.title, isDone: false}, ...state[action.todolistId]]}\r\n        }\r\n        case \"ADD-TODO-LIST\": {\r\n            return {...state, [action.newId]: []}\r\n        }\r\n        case \"ONCHANGE-TITLE\":{\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => t.id === action.idTask?{...t, title: action.title} : t)}\r\n        }\r\n        case \"CHANGE-STATUS\":{\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => t.id === action.id ? {...t,isDone: action.isDone} : t)}\r\n        }\r\n        case \"REMOVE-TODOLIST\":{\r\n            let copyState = {...state}\r\n            delete copyState[action.id];\r\n            return copyState\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type ActionTaskType = RemoveTaskType | AddTaskType|OnChangeTitleType|ChangeStatusType|AddTodoListType|RemoveTodoType\r\n\r\nexport type RemoveTaskType = ReturnType<typeof removeTaskAC>\r\nexport const removeTaskAC = (id: string, todolistId: string) => {\r\n    return {\r\n        type: \"REMOVE-TASKS\",\r\n        id,\r\n        todolistId,\r\n    } as const\r\n}\r\n\r\nexport type AddTaskType = ReturnType<typeof addTaskAC>\r\nexport const addTaskAC = (title: string, todolistId: string) => {\r\n    return {\r\n        type: \"ADD-TASK\",\r\n        title,\r\n        todolistId\r\n    } as const\r\n}\r\n\r\n\r\nexport type OnChangeTitleType = ReturnType<typeof onChangeTitleAC>\r\nexport const onChangeTitleAC = (title: string, todolistId: string, idTask: string) => {\r\n    return{\r\n        type:\"ONCHANGE-TITLE\",\r\n        title,\r\n        todolistId,\r\n        idTask\r\n    }as const\r\n}\r\n\r\nexport type ChangeStatusType = ReturnType<typeof changeStatusAC>\r\nexport const changeStatusAC = (id: string, isDone: boolean, todolistId: string) => {\r\n    return {\r\n        type: \"CHANGE-STATUS\",\r\n        id,\r\n        isDone,\r\n        todolistId\r\n    }as const\r\n}\r\n","import {FilterValuesType, TodolistType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\nlet initialStateTodoList: TodolistType[]  = []\r\n\r\nexport const todoListsReducer = (state = initialStateTodoList,action:ActionTodoListType): TodolistType[] => {\r\n    switch (action.type){\r\n        case \"CHANGE-TODO-FILTER\":{\r\n         return  state.map(f => f.id === action.todolistId ? {...f, filter: action.valueFilter} : f)\r\n        }\r\n        case \"REMOVE-TODOLIST\":{\r\n            return (state.filter(tl => tl.id !== action.id))\r\n        }\r\n        case \"ONCHANGE-TODOLIST-TITLE\":{\r\n            return state.map(m => m.id === action.id ? {...m, title:action.title} : m)\r\n        }\r\n        case \"ADD-TODO-LIST\":{\r\n            return [{id: action.newId, title: action.title, filter: \"all\"},...state]\r\n        }\r\n\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport type ActionTodoListType = changeTodoType|RemoveTodoType|OnChangeTodoListTitle|AddTodoListType\r\n\r\nexport type changeTodoType = ReturnType<typeof changeTodoFilterAC>\r\nexport const changeTodoFilterAC = (valueFilter: FilterValuesType, todolistId: string) => {\r\n    return {\r\n        type: \"CHANGE-TODO-FILTER\",\r\n        valueFilter,\r\n        todolistId\r\n    }as const\r\n}\r\n\r\nexport type RemoveTodoType = ReturnType<typeof removeTodolistAC>\r\nexport const removeTodolistAC = (id: string) => {\r\n    return {\r\n        type: \"REMOVE-TODOLIST\",\r\n        id\r\n    }as const\r\n}\r\n\r\nexport type OnChangeTodoListTitle = ReturnType<typeof onChangeTodoListTitleAC>\r\nexport const onChangeTodoListTitleAC = (title: string, id: string) => {\r\n    return{\r\n        type: \"ONCHANGE-TODOLIST-TITLE\",\r\n        title,\r\n        id\r\n    }as const\r\n}\r\n\r\nexport type AddTodoListType = ReturnType<typeof addTodoListAC>\r\nexport const addTodoListAC = (title:string) =>{\r\n    return{\r\n        type:\"ADD-TODO-LIST\",\r\n        title,\r\n        newId:v1(),\r\n    }as const\r\n}\r\n\r\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Components/Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from \"./Components/AddItemFormPropsType\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {addTaskAC, changeStatusAC, onChangeTitleAC, removeTaskAC, tasksReducer} from \"./reducers/tasksReducer\";\r\nimport {addTodoListAC, changeTodoFilterAC, onChangeTodoListTitleAC, removeTodolistAC, todoListsReducer} from \"./reducers/todoListReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType, AppStateType} from \"./store/store\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nconst  App = React.memo(() => {\r\n    const dispatch = useDispatch()\r\n    const todoLists = useSelector<AppRootStateType,TodolistType[]>(state =>state.todoLists)\r\n    const tasks = useSelector<AppRootStateType,TasksStateType>(state=>state.tasks)\r\n\r\n const onChangeTitle = useCallback((value: string, todolistId: string, id: string) => {\r\n        dispatch(onChangeTitleAC(value,todolistId,id))\r\n    },[dispatch])\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n    dispatch(removeTaskAC(id,todolistId))\r\n    },[dispatch])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n    dispatch(addTaskAC(title,todolistId))\r\n    },[dispatch])\r\n\r\n    const changeStatus = useCallback((id: string, isDone: boolean, todolistId: string) => {\r\n        dispatch(changeStatusAC(id,isDone,todolistId))\r\n    },[dispatch])\r\n\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        const action = addTodoListAC(title)\r\n        dispatch(action)\r\n    },[dispatch])\r\n\r\n    const changeTodoFilter = useCallback((valueFilter: FilterValuesType, todolistId: string) => {\r\n        dispatch(changeTodoFilterAC(valueFilter,todolistId))\r\n    },[dispatch])\r\n\r\n    const removeTodolist = useCallback((id: string) => {\r\n        const action = removeTodolistAC(id)\r\n        dispatch(action)\r\n    },[dispatch])\r\n\r\n    const onChangeTodoListTitle = useCallback((title: string, id: string) => {\r\n        dispatch(onChangeTodoListTitleAC(title, id))\r\n    },[dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{mr: 2}}\r\n                    >\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed style={{marginTop:\"10px\"}}>\r\n                <Grid container>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n            </Container>\r\n\r\n            <Container fixed>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todoLists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n\r\n\r\n                            return <Grid item>\r\n                                <Paper style={{padding:\"20px\", marginTop: \"40px\"}}>\r\n                                    <Todolist\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={allTodolistTasks}\r\n                                        removeTask={removeTask}\r\n                                        changeTodoFilter={changeTodoFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        onChangeTaskTitle={onChangeTitle}\r\n                                        onChangeTodoListTitle={onChangeTodoListTitle}\r\n                                    />\r\n                                </Paper>\r\n\r\n                                </Grid>\r\n                        })\r\n                    }\r\n\r\n                </Grid>\r\n            </Container>\r\n\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {tasksReducer} from \"../reducers/tasksReducer\";\r\nimport {todoListsReducer} from \"../reducers/todoListReducer\";\r\nimport {combineReducers, createStore} from \"redux\";\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n        tasks: tasksReducer,\r\n        todoLists: todoListsReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer);\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\r\nexport type AppStateType = typeof store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./store/store\";\r\n\r\nReactDOM.render(<Provider store={store}>\r\n                 <App/>\r\n                </Provider>,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}