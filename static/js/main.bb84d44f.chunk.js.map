{"version":3,"sources":["api/todolist-api.ts","utils/error-utils.ts","features/authReducer.ts","app/app-reduser.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","features/login.tsx","components/AddItemFormPropsType/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/todoListReducer.ts","features/TodolistsList/tasksReducer.ts","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistList.tsx","app/App.tsx","serviceWorker.ts","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","todolistId","delete","put","tasksAPI","taskId","taskID","model","authAPI","data","handleServerAppError","dispatch","messages","length","actionApp","setAppError","setAppStatus","handleServerNetworkError","error","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedIn","state","action","payload","value","authReducer","reducer","status","errorMessage","initialized","type","setAppInitialized","Alert","React","props","ref","elevation","variant","SnackbarError","useSelector","app","useDispatch","handleClose","event","reason","isOpen","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","severity","sx","width","Login","auth","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","then","res","resultCode","actions","catch","to","style","marginTop","Grid","container","justifyContent","item","FormControl","FormLabel","fontWeight","href","target","handleSubmit","FormGroup","TextField","color","label","margin","getFieldProps","touched","FormControlLabel","control","Checkbox","onChange","handleChange","checked","AddItemForm","memo","useState","setTitle","setError","addItem","trim","e","currentTarget","onKeyPress","charCode","helperText","size","disabled","IconButton","onClick","AddBox","EditableSpan","editMode","setEditMode","activateViewMode","autoFocus","onBlur","onDoubleClick","actionTodo","todolist","filter","todos","actionTask","task","tasks","Task","removeTask","useCallback","id","a","changeStatus","newIsDoneValue","Completed","New","getState","find","t","startDate","priority","description","deadline","changeTaskTitle","newTitle","titleUpdateTaskTC","className","entityStatus","Delete","Todolist","demo","useEffect","items","changeFilter","changeTodolistTitle","updateTitleTodolistTC","removeTodolist","addTask","createTaskTC","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","map","paddingTop","Button","TodolistList","todolists","todoLists","addTodolist","createTodolistTC","padding","spacing","tl","allTodolistTasks","Paper","App","isInitialized","logoutHandler","AppBar","backgroundColor","position","Toolbar","edge","Menu","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","Boolean","window","location","hostname","match","rootReducer","combineReducers","todoListId","copyState","forEach","stateCop","m","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.bb84d44f.chunk.js","sourcesContent":["import axios,{AxiosResponse} from \"axios\";\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"21d990e0-eae8-42bd-a185-362e1cc41b0a\"\r\n    }\r\n})\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists')\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`);\r\n    },\r\n    updateTodolistTitle(todolistId: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${todolistId}`, {title});\r\n    }\r\n}\r\n\r\nexport const tasksAPI = {\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskID: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskID}`, model)\r\n    }}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{userId?: number}>>('auth/login', data);\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{userId?: number}>>('auth/login');\r\n    },\r\n    me() {\r\n       return  instance.get<ResponseType<{id: number; email: string; login: string}>>('auth/me');\r\n    }\r\n}","import {actionApp, AppActionsType} from \"../app/app-reduser\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ResponseType} from \"../api/todolist-api\";\r\n\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch:ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(actionApp.setAppError(data.messages[0]))\r\n    } else {\r\n        dispatch(actionApp.setAppError('Some error occurred'))\r\n    }\r\n    dispatch(actionApp.setAppStatus('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch:ErrorUtilsDispatchType) => {\r\n    dispatch(actionApp.setAppError(error.message))\r\n    dispatch(actionApp.setAppStatus('failed'))\r\n}\r\ntype ErrorUtilsDispatchType = Dispatch<AppActionsType>\r\n","import {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {AppThunkType} from \"../app/store\";\r\nimport {actionApp} from \"../app/app-reduser\";\r\nimport {authAPI, LoginParamsType} from \"../api/todolist-api\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: \"auth\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedIn(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer;\r\n\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(actionApp.setAppStatus('loading'))\r\n    authAPI.login(data).then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(slice.actions.setIsLoggedIn({value: true}))\r\n            dispatch(actionApp.setAppStatus('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n        }\r\n    })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const logoutTC = (): AppThunkType => (dispatch) => {\r\n    dispatch(actionApp.setAppStatus('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(slice.actions.setIsLoggedIn({value: false}))\r\n                dispatch(actionApp.setAppStatus('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}","import {AppThunkType, InferActionTypes} from \"./store\";\r\nimport {authAPI} from \"../api/todolist-api\";\r\nimport {slice} from \"../features/authReducer\";\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type ErrorType = string | null\r\n\r\nexport type AppInitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    errorMessage: null as ErrorType,\r\n    initialized: false,\r\n}\r\n\r\nexport const appReducer = (state: AppInitialStateType = initialState, action: AppActionsType): AppInitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS': {\r\n            return {...state, status: action.status};\r\n        }\r\n        case 'APP/SET-ERROR': {\r\n            return {...state, errorMessage: action.error}\r\n        }\r\n        case 'APP/SET-INITIALIZED':\r\n            return {...state, initialized:action.initialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type AppActionsType = InferActionTypes<typeof actionApp>\r\n\r\nexport const actionApp = {\r\n    setAppStatus: (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const),\r\n    setAppError: (error: ErrorType) => ({type: 'APP/SET-ERROR', error} as const),\r\n    setAppInitialized: (initialized: boolean) => ({type: 'APP/SET-INITIALIZED', initialized} as const)\r\n}\r\n\r\nexport const initializeAppTC = ():AppThunkType => (dispatch) => {\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(slice.actions.setIsLoggedIn({value:true}));\r\n        }else {\r\n\r\n        }\r\n        dispatch(actionApp.setAppInitialized(true))\r\n    })\r\n}","import * as React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {actionApp, ErrorType} from \"../../app/app-reduser\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function SnackbarError() {\r\n\r\n    const error = useSelector<AppRootStateType, ErrorType>(state => state.app.errorMessage)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent<any> | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(actionApp.setAppError(null))\r\n    };\r\n\r\n\r\n    const isOpen = error !== null\r\n\r\n    return (\r\n        <Snackbar anchorOrigin={{vertical: \"bottom\", horizontal: \"center\"}} open={isOpen} autoHideDuration={4000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}","import Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {loginTC} from \"./authReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../app/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {useFormik} from \"formik\";\r\n\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required field';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required field'\r\n            } else if (values.password.length < 3) {\r\n                errors.password = \"Invalid password ( < 3 symbols )\"\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            formik.resetForm();\r\n            dispatch(loginTC(values))\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to=\"/\"/>\r\n    }\r\n\r\n    return (\r\n        <div style={{marginTop: \"50px\"}}>\r\n            <Grid container justifyContent={'center'}>\r\n                <Grid item justifyContent={'center'}>\r\n                    <FormControl>\r\n                        <FormLabel>\r\n                            <p style={{fontWeight: \"bold\"}}>To log in get registered\r\n                                <a href={'https://social-network.samuraijs.com/'}\r\n                                   target={' _blank'}> here\r\n                                </a>\r\n                            </p>\r\n                            <p style={{fontWeight: \"bold\"}}>or use common test account credentials:</p>\r\n                            <p style={{fontWeight: \"bold\"}}>Email: free@samuraijs.com</p>\r\n                            <p style={{fontWeight: \"bold\"}}>Password: free</p>\r\n                        </FormLabel>\r\n                        <form onSubmit={formik.handleSubmit}>\r\n                            <FormGroup>\r\n                                <TextField\r\n                                    color={\"success\"}\r\n                                    label=\"Email\"\r\n                                    margin=\"normal\"\r\n                                    {...formik.getFieldProps('email')}/>\r\n                                {formik.touched.email && formik.errors.email ? <div style={{color: \"red\"}}>{formik.errors.email}</div> : null}\r\n\r\n                                <TextField color={\"success\"} type=\"password\" label=\"Password\"\r\n                                           margin=\"normal\"\r\n                                           {...formik.getFieldProps('password')}\r\n                                />\r\n                                {formik.touched.password && formik.errors.password ? <div style={{color: \"red\"}}>{formik.errors.password}</div> : null}\r\n                                <FormControlLabel label={'Remember me'} control={<Checkbox    color={\"success\"} onChange={formik.handleChange}\r\n                                                                                           checked={formik.values.rememberMe}\r\n                                                                                           name={\"rememberMe\"}/>}/>\r\n                                <Button type={'submit'} variant={'contained'} color={'success'}>\r\n                                    Login\r\n                                </Button>\r\n                            </FormGroup>\r\n                        </form>\r\n                    </FormControl>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {AddBox} from \"@material-ui/icons\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype AddItemForm = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemForm) {\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n                   size={\"small\"}\r\n                   disabled={props.disabled}\r\n        />\r\n        <IconButton color={\"success\"} onClick={addItem} disabled={props.disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n    disabled?:boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        if (props.disabled){\r\n            return\r\n        }\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n\r\n    const keyActivateMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.charCode === 13) {\r\n            activateViewMode();\r\n        }\r\n    }\r\n\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <input value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} onKeyPress={keyActivateMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import {todolistsAPI, TodolistType} from \"../../api/todolist-api\";\r\nimport {AppThunkType, InferActionTypes} from \"../../app/store\";\r\nimport {actionApp, RequestStatusType} from \"../../app/app-reduser\";\r\n\r\nconst initialState: Array<TodolistDomainType> = [\r\n\r\n];\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType,\r\n    entityStatus: RequestStatusType,\r\n};\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: TodolistsActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id !== action.todolistId)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{\r\n                ...action.todolist,\r\n                filter: 'all',\r\n                entityStatus: 'idle'\r\n            }, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            return state.map(tl => tl.id === action.todolistId ? {...tl, title: action.title} : tl)\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            return state.map(tl => tl.id === action.todolistId ? {...tl, filter: action.filter} : tl)\r\n        }\r\n        case 'SET-TODOS': {\r\n            return action.todos.map(m => ({...m, filter: 'all', entityStatus:'idle'}))\r\n        }\r\n        case \"CHANGE-TODOLIST-STATUS\":{\r\n            return state.map(tl => tl.id === action.todolistId ? {...tl, entityStatus: action.status} : tl)\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport type TodolistsActionsType = InferActionTypes<typeof actionTodo>;\r\n\r\nexport const actionTodo = {\r\n    removeTodolistAC: (todolistId: string) =>\r\n        ({type: 'REMOVE-TODOLIST', todolistId} as const),\r\n\r\n    addTodolistAC: (todolist: TodolistType) =>\r\n        ({type: 'ADD-TODOLIST', todolist} as const),\r\n\r\n    changeTodolistTitleAC: (todolistId: string, title: string) =>\r\n        ({type: 'CHANGE-TODOLIST-TITLE', todolistId, title} as const),\r\n\r\n    changeTodolistEntityStatusAC: (todolistId: string, status: RequestStatusType) =>\r\n        ({type: 'CHANGE-TODOLIST-STATUS', todolistId, status} as const),\r\n\r\n    changeTodolistFilterAC: (todolistId: string, filter: FilterValuesType) =>\r\n        ({type: 'CHANGE-TODOLIST-FILTER', todolistId, filter} as const),\r\n\r\n    setTodos: (todos: TodolistType[]) => ({type: 'SET-TODOS', todos} as const),\r\n};\r\n\r\nexport const getTodolistThunkTC = (): AppThunkType => async dispatch => {\r\n    dispatch(actionApp.setAppStatus(\"loading\"));\r\n    const res = await todolistsAPI.getTodolists();\r\n    dispatch(actionTodo.setTodos(res.data));\r\n    dispatch(actionApp.setAppStatus(\"succeeded\"));\r\n};\r\nexport const removeTodolistTC = (id: string): AppThunkType => async dispatch => {\r\n    dispatch(actionApp.setAppStatus(\"loading\"));\r\n    dispatch(actionTodo.changeTodolistEntityStatusAC(id,\"loading\"))\r\n    await todolistsAPI.deleteTodolist(id);\r\n    dispatch(actionTodo.removeTodolistAC(id));\r\n    dispatch(actionApp.setAppStatus(\"succeeded\"));\r\n};\r\nexport const createTodolistTC = (title: string): AppThunkType => async dispatch => {\r\n    dispatch(actionApp.setAppStatus(\"loading\"));\r\n    const res = await todolistsAPI.createTodolist(title);\r\n    dispatch(actionTodo.addTodolistAC(res.data.data.item))\r\n    dispatch(actionApp.setAppStatus(\"succeeded\"));\r\n\r\n};\r\nexport const updateTitleTodolistTC = (id: string, title: string): AppThunkType => async dispatch => {\r\n    dispatch(actionApp.setAppStatus(\"loading\"));\r\n    dispatch(actionTodo.changeTodolistEntityStatusAC(id,\"loading\"))\r\n    await todolistsAPI.updateTodolistTitle(id, title)\r\n    dispatch(actionTodo.changeTodolistTitleAC(id, title))\r\n    dispatch(actionApp.setAppStatus(\"succeeded\"));\r\n    dispatch(actionTodo.changeTodolistEntityStatusAC(id,\"succeeded\"))\r\n};\r\n","import {AppThunkType, InferActionTypes, RootAppActionType} from \"../../app/store\";\r\nimport {tasksAPI, TaskStatuses, TaskType} from \"../../api/todolist-api\";\r\nimport {actionApp} from \"../../app/app-reduser\";\r\nimport {actionTodo} from \"./todoListReducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n};\r\n\r\nconst initialState: TasksStateType = {};\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: RootAppActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)};\r\n        }\r\n        case 'ADD-TASK': {\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            return {...state, [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {...t, status: action.status} : t)};\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            return {\r\n                ...state, [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {...t, title: action.title} : t)\r\n            };\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {...state, [action.todolist.id]: []}\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.todolistId];\r\n            return copyState;\r\n        }\r\n        case \"SET-TODOS\": {\r\n            const copyState = {...state}\r\n            action.todos.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case \"GET-TASKS\": {\r\n            let stateCop = {...state}\r\n            stateCop[action.todolistId] = action.tasks;\r\n            return stateCop\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport type TasksActionType = InferActionTypes<typeof actionTask>;\r\n\r\nexport const actionTask = {\r\n    removeTaskAC: (taskId: string, todolistId: string) =>\r\n        ({type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId} as const),\r\n\r\n    addTaskAC: (task: TaskType) =>\r\n        ({type: 'ADD-TASK', task} as const),\r\n\r\n    changeTaskStatusAC: (taskId: string, status: TaskStatuses, todolistId: string) =>\r\n        ({type: 'CHANGE-TASK-STATUS', status, todolistId, taskId} as const),\r\n\r\n    changeTaskTitleAC: (taskId: string, title: string, todolistId: string) =>\r\n        ({type: 'CHANGE-TASK-TITLE', title, todolistId, taskId} as const),\r\n\r\n    getTasks: (todolistId: string, tasks: TaskType[]) =>\r\n        ({type: \"GET-TASKS\", tasks, todolistId} as const),\r\n\r\n};\r\n\r\nexport const fetchTaskTC = (todolistId: string): AppThunkType => async dispatch => {\r\n    dispatch(actionApp.setAppStatus(\"loading\"));\r\n    let res = await tasksAPI.getTasks(todolistId);\r\n    dispatch(actionTask.getTasks(todolistId, res.data.items));\r\n    dispatch(actionApp.setAppStatus(\"succeeded\"));\r\n};\r\n\r\nexport const removeTaskTC = (taskId: string, todolistId: string): AppThunkType => async dispatch => {\r\n    dispatch(actionApp.setAppStatus(\"loading\"));\r\n    dispatch(actionTodo.changeTodolistEntityStatusAC(todolistId, \"loading\"))\r\n    let res = await tasksAPI.deleteTask(todolistId, taskId);\r\n    dispatch(actionTask.removeTaskAC(taskId, todolistId));\r\n    dispatch(actionApp.setAppStatus(\"succeeded\"));\r\n    dispatch(actionTodo.changeTodolistEntityStatusAC(todolistId, \"succeeded\"))\r\n};\r\n\r\nexport const createTaskTC = (todolistId: string, title: string): AppThunkType => dispatch => {\r\n    dispatch(actionApp.setAppStatus(\"loading\"));\r\n    dispatch(actionTodo.changeTodolistEntityStatusAC(todolistId, \"loading\"))\r\n    tasksAPI.createTask(todolistId, title).then((res) => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(actionTask.addTaskAC(res.data.data.item));\r\n            dispatch(actionApp.setAppStatus(\"succeeded\"));\r\n            dispatch(actionTodo.changeTodolistEntityStatusAC(todolistId, \"succeeded\"))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            dispatch(actionTodo.changeTodolistEntityStatusAC(todolistId, \"failed\"))\r\n        }\r\n    })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n            dispatch(actionTodo.changeTodolistEntityStatusAC(todolistId, \"failed\"))\r\n        })\r\n}\r\n\r\nexport const updateTaskStatusTC = (taskId: string, todolistId: string, status: TaskStatuses): AppThunkType =>\r\n    async (dispatch, getState) => {\r\n        dispatch(actionApp.setAppStatus(\"loading\"));\r\n        dispatch(actionTodo.changeTodolistEntityStatusAC(todolistId, \"loading\"))\r\n        const task = getState().tasks[todolistId].find(t => t.id === taskId);\r\n        if (task) {\r\n            await tasksAPI.updateTask(todolistId, taskId, {\r\n                title: task.title,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status,\r\n            })\r\n            dispatch(actionTask.changeTaskStatusAC(taskId, status, todolistId));\r\n            dispatch(actionApp.setAppStatus(\"succeeded\"));\r\n            dispatch(actionTodo.changeTodolistEntityStatusAC(todolistId, \"succeeded\"))\r\n        }\r\n    };\r\n\r\nexport const titleUpdateTaskTC = (taskId: string, newTitle: string, todolistId: string): AppThunkType =>\r\n    (dispatch, getState) => {\r\n        dispatch(actionApp.setAppStatus(\"loading\"));\r\n        const task = getState().tasks[todolistId].find(t => t.id === taskId);\r\n        if (task) {\r\n            tasksAPI.updateTask(todolistId, taskId, {\r\n                title: newTitle,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status: task.status,\r\n            })\r\n                .then((res) => {\r\n                    if (res.data.resultCode === 0) {\r\n                        dispatch(actionTask.changeTaskTitleAC(taskId, newTitle, todolistId));\r\n                        dispatch(actionApp.setAppStatus(\"succeeded\"));\r\n                    } else {\r\n                        handleServerAppError(res.data, dispatch)\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    handleServerNetworkError(error, dispatch)\r\n                })\r\n        }\r\n    };\r\n","import {Delete} from \"@material-ui/icons\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolist-api\";\r\nimport {removeTaskTC, titleUpdateTaskTC, updateTaskStatusTC} from \"../../tasksReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {TodolistDomainType} from \"../../todoListReducer\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolist: TodolistDomainType\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const removeTask = useCallback(function () {\r\n        dispatch(removeTaskTC(props.task.id, props.todolist.id));\r\n    }, [props.task.id, props.todolist.id]);\r\n\r\n    const changeStatus = useCallback(function (e: ChangeEvent<HTMLInputElement>) {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        dispatch(updateTaskStatusTC(props.task.id, props.todolist.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New));\r\n    }, [props.task.id, props.todolist.id]);\r\n\r\n    const changeTaskTitle = useCallback(function (newTitle: string) {\r\n        dispatch(titleUpdateTaskTC(props.task.id, newTitle, props.todolist.id));\r\n    }, [props.task.id, props.todolist.id]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color={\"success\"}\r\n            onChange={changeStatus}\r\n            disabled={props.todolist.entityStatus === \"loading\"}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={changeTaskTitle} disabled={props.todolist.entityStatus === \"loading\"}/>\r\n        <IconButton onClick={removeTask} disabled={props.todolist.entityStatus === \"loading\"}>\r\n            <Delete color={\"error\"}/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {actionTodo, FilterValuesType, removeTodolistTC, TodolistDomainType, updateTitleTodolistTC} from \"../todoListReducer\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolist-api\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {AddItemForm} from \"../../../components/AddItemFormPropsType/AddItemForm\";\r\nimport {createTaskTC, fetchTaskTC} from \"../tasksReducer\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(({demo = false, ...props}: PropsType) => {\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        dispatch(fetchTaskTC(props.todolist.id))\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        dispatch(actionTodo.changeTodolistFilterAC(todolistId, value));\r\n    }, []);\r\n\r\n    const changeTodolistTitle = useCallback(function (title: string) {\r\n        dispatch(updateTitleTodolistTC(props.todolist.id, title));\r\n    }, [props.todolist.id]);\r\n\r\n    const removeTodolist = useCallback(function () {\r\n        dispatch(removeTodolistTC(props.todolist.id));\r\n    }, []);\r\n\r\n    const addTask = useCallback(function (title: string) {\r\n        dispatch(createTaskTC(props.todolist.id, title));\r\n    }, [props.todolist.id]);\r\n\r\n    const onAllClickHandler = useCallback(() => changeFilter('all', props.todolist.id), [props.todolist.id, changeFilter])\r\n    const onActiveClickHandler = useCallback(() => changeFilter('active', props.todolist.id), [props.todolist.id, changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => changeFilter('completed', props.todolist.id), [props.todolist.id, changeFilter])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle} disabled={props.todolist.entityStatus === \"loading\"}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === \"loading\"}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === \"loading\"}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t}\r\n                                                todolist={props.todolist}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'contained' : 'outlined'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'primary'}>\r\n                All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'contained' : 'outlined'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'warning'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'contained' : 'outlined'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'success'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../components/AddItemFormPropsType/AddItemForm\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {createTodolistTC, getTodolistThunkTC, TodolistDomainType} from \"./todoListReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {TasksStateType} from \"./tasksReducer\";\r\nimport {RequestStatusType} from \"../../app/app-reduser\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistList = React.memo(({demo=false,...props}:PropsType) => {\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todoLists)\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state=>state.auth.isLoggedIn)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if(demo || !isLoggedIn){\r\n            return\r\n        }\r\n        dispatch(getTodolistThunkTC())\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(createTodolistTC(title));\r\n    }, []);\r\n\r\n    if (!isLoggedIn){\r\n        return <Navigate to=\"/login\"/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist} disabled={status === \"loading\"}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n\r\n                    let allTodolistTasks = tasks[tl.id];\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n})","import './App.css';\r\nimport {AppBar, Button, CircularProgress, Container, IconButton, Toolbar} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {LinearProgress} from \"@mui/material\";\r\nimport {SnackbarError} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {initializeAppTC, RequestStatusType} from \"./app-reduser\";\r\nimport {Login} from \"../features/login\";\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {logoutTC} from \"../features/authReducer\";\r\nimport {useCallback, useEffect} from \"react\";\r\nimport {TodolistList} from \"../features/TodolistsList/TodolistList\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nconst App = ({demo = false, ...props}: PropsType) => {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.initialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <SnackbarError/>\r\n            <AppBar style={{backgroundColor: \"green\", color: \"white\"}} color={\"transparent\"} position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    {isLoggedIn && <Button color=\"inherit\" variant={\"outlined\"} onClick={logoutHandler}>Log out</Button>}\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === \"loading\" && <LinearProgress sx={{position: \"relative\"}} color={\"warning\"}/>}\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={\"/\"} element={<TodolistList demo={demo}/>}/>\r\n                    <Route path={\"login\"} element={<Login/>}/>\r\n                    <Route path=\"/404\" element={<h1>404: PAGE NOT FOUND </h1>}/>\r\n                    <Route path=\"*\" element={<Navigate to=\"/404\"/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {TasksActionType, tasksReducer} from \"../features/TodolistsList/tasksReducer\";\r\nimport {combineReducers} from \"redux\";\r\nimport {TodolistsActionsType, todolistsReducer} from \"../features/TodolistsList/todoListReducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport {AppActionsType, appReducer} from \"./app-reduser\";\r\nimport {ActionsAuthType, authReducer} from \"../features/authReducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\n\r\n// export const store = createStore(rootReducer,applyMiddleware(thunk));\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\r\n\r\nexport type InferActionTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\nexport type RootAppActionType = TodolistsActionsType | TasksActionType | AppActionsType | ActionsAuthType\r\nexport type AppThunkType<ReturnType = void> = ThunkAction<void, AppRootStateType, unknown, RootAppActionType>\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\n\r\nReactDOM.render(<Provider store={store}>\r\n    <HashRouter><App/></HashRouter>\r\n</Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}